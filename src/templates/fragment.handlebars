{{#*inline "selectionSet"}}
{{#each this}}
{{ name }}{{#unless isRequired}}?{{/unless}}: {{ toPrimitive type }}{{#if isArray}}[]{{/if}}{{#unless isRequired}} | null{{/unless}}; {{#if description }}  // {{description}}{{/if}}
{{/each}}
{{/inline}}

{{#*inline "fragments"}}
{{#if hasFragmentsSpread}}{{#if hasFields}} & {{/if}}{{#each fragmentsSpread}}{{fragmentName}}.Fragment{{#unless @last}} & {{/unless}}{{/each}}{{/if}}{{#if hasInlineFragments}}{{#if hasFields}} & ({{/if}}{{#each inlineFragments}}{{onType}}{{#unless @last}} | {{/unless}}{{/each}}{{#if hasFields}}){{/if}}{{/if}}
{{/inline}}

{{#eachImport this }}
{{ relativeImport this path='./'}}
{{/eachImport}}
export namespace {{name}} {
  export type Fragment = {
    __typename?: "{{ onType }}";
    {{> selectionSet fields }}
  }{{> fragments this }}
  {{#each innerModels }}
  export type {{ modelType }} = {
  {{#unless hasInlineFragments}}
    __typename?: "{{ schemaBaseType }}";
  {{else}}
    __typename?: {{#each inlineFragments}}{{onType}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};
  {{/unless}}
    {{> selectionSet fields }}
  }{{> fragments this }}
  {{/each}}
}
