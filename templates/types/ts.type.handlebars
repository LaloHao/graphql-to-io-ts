import * as t from 'io-ts'
{{#eachImport this }}
{{ relativeImport this path='./types'}}
{{/eachImport}}

type Integer = number

{{ multilineComment description }}
interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {
  {{> tsFields fields }}
}{{#each fields}}{{# if hasArguments }}

export interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {
  {{> tsFields arguments }}
}
{{/if}}{{/each}}


namespace {{ name }} {
  // output type needed for mutually recursive types
  export interface O{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {
    {{> outputFields fields }}
  }
}

{{ multilineComment description }}
const {{ name }}: t.RecursiveType<t.Mixed, {{ name }}, {{ name }}.O> = {{#wrapRecursive}}{{#if hasInterfaces}}t.intersection([
{{#each interfaces}}  {{this}},
{{/each}}  {{/if}}{{> iotsFields fields parentName=name }}{{#if hasInterfaces}}
]){{/if}}{{/wrapRecursive}}
{{#each fields}}{{# if hasArguments }}
export const {{ toPascalCase name }}{{ toPascalCase ../name }}Args = {{> iotsFields arguments }}
{{/if}}{{/each}}

export { {{ name }} }
